import pytest
import allure
from scapy.all import *
from scapy.layers.inet import ICMP, IP, Ether
from scapy.layers.l2 import Dot1Q

IP_DST = ["192.168.43.2", "192.168.41.2", "192.168.42.2"]
IP_SRC = "192.168.44.254"
MAC_DST = "68:13:e2:d8:01:12"
MAC_SRC = "60:cf:84:bd:eb:4f"
CE4_INTERFACE = "enp3s0"
VLAN_ID = 4028

EXPECTED_HOPS = {
    "192.168.43.2": ["192.168.44.1", "192.168.43.1", "192.168.43.2"],
    "192.168.41.2": ["192.168.44.1", "192.168.41.2"], 
    "192.168.42.2": ["192.168.44.1", "192.168.42.1", "192.168.42.2"]
}
TIMEOUT = 2
MAX_HOPS = 15

def send_icmp_traceroute_via_vlan(src_ip, dst_ip, vlan_id, interface, ttl):
    #–¥–æ–±–∞–≤–ª—è–µ–º ttl
    pkt = (Ether(src=MAC_SRC, dst=MAC_DST) / 
           Dot1Q(vlan=vlan_id) / 
           IP(src=src_ip, dst=dst_ip, ttl=ttl) / 
           ICMP(type=8, code=0, id=12345, seq=ttl))

    ans = srp1(pkt, iface=interface, timeout=TIMEOUT, verbose=0)

    return ans

@allure.step("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ traceroute –∫ {dst_ip}")
def trace_route_to_ce(dst_ip, vlan_id, interface):
    
    hops_info = []
    reached_destination = False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è allure
    with allure.step(f"Traceroute –∫ {dst_ip} —á–µ—Ä–µ–∑ VLAN {vlan_id}"):
        allure.attach(f"""
        –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å –¥–ª—è {dst_ip}:
        {', '.join(EXPECTED_HOPS.get(dst_ip, []))}
        """, name="–û–∂–∏–¥–∞–µ–º—ã–π –º–∞—Ä—à—Ä—É—Ç")
    
    for ttl in range(1, MAX_HOPS + 1):
        with allure.step(f"–•–æ–ø {ttl}"):
            response_pkt = send_icmp_traceroute_via_vlan(
                IP_SRC, dst_ip, vlan_id, interface, ttl
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π IP –¥–ª—è —ç—Ç–æ–≥–æ —Ö–æ–ø–∞
            expected_ip = EXPECTED_HOPS.get(dst_ip, [])[ttl-1] if ttl <= len(EXPECTED_HOPS.get(dst_ip, [])) else "Unknown"
            
            if response_pkt is None:
                status = "Timeout"
                actual_ip = "*"
                is_correct = False
                allure.attach(f"TTL: {ttl}\n–°—Ç–∞—Ç—É—Å: {status}", name="–†–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–ø–∞")
            else:
                actual_ip = response_pkt[IP].src
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å IP
                if expected_ip != "Unknown":
                    is_correct = (actual_ip == expected_ip)
                    status = "Correct" if is_correct else f"Expected: {expected_ip}"
                else:
                    is_correct = True
                    status = "Unknown expected"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
                icmp_info = ""
                if response_pkt.haslayer(ICMP):
                    if response_pkt[ICMP].type == 0:
                        status += " Destination"
                        reached_destination = True
                        icmp_info = "ICMP Echo Reply - –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å"
                    elif response_pkt[ICMP].type == 11:
                        status += " Intermediate"
                        icmp_info = "ICMP Time Exceeded - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —É–∑–µ–ª"
                    else:
                        icmp_info = f"ICMP Type {response_pkt[ICMP].type}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ allure
                hop_details = f"""
                TTL: {ttl}
                –û–∂–∏–¥–∞–µ–º—ã–π IP: {expected_ip}
                –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π IP: {actual_ip}
                –°—Ç–∞—Ç—É—Å: {status}
                ICMP: {icmp_info}
                –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å: {'‚úì' if is_correct else '‚úó'}
                """
                allure.attach(hop_details, name=f"–•–æ–ø {ttl} –¥–µ—Ç–∞–ª–∏")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ–ø–µ
            hops_info.append({
                'ttl': ttl,
                'expected_ip': expected_ip,
                'actual_ip': actual_ip,
                'is_correct': is_correct,
                'is_destination': reached_destination,
                'status': status
            })
            
            if reached_destination:
                allure.step(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞: {actual_ip}")
                break
    
    return hops_info, reached_destination

@allure.epic("–°–µ—Ç–µ–≤—ã–µ —Ç–µ—Å—Ç—ã")
@allure.feature("Traceroute —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
@allure.title("Traceroute –∫ CE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º")
@allure.description("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ CE —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ VLAN")
@pytest.mark.parametrize("ce_ip", IP_DST)
def test_traceroute_to_ce(ce_ip):
    
    allure.dynamic.title(f"Traceroute –∫ {ce_ip}")
    allure.dynamic.description(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {ce_ip}")
    
    with allure.step("–ó–∞–ø—É—Å–∫ traceroute"):
        hops_info, reached_destination = trace_route_to_ce(ce_ip, VLAN_ID, CE4_INTERFACE)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏"):
        assert reached_destination, f"–¶–µ–ª—å {ce_ip} –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞"
        allure.attach(f"–¶–µ–ª—å {ce_ip} —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞", name="–†–µ–∑—É–ª—å—Ç–∞—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ö–æ–ø–æ–≤
    with allure.step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞"):
        incorrect_hops = []
        for hop in hops_info:
            if not hop['is_correct'] and hop['expected_ip'] != "Unknown":
                incorrect_hops.append(f"–•–æ–ø {hop['ttl']}: –æ–∂–∏–¥–∞–ª—Å—è {hop['expected_ip']}, –ø–æ–ª—É—á–µ–Ω {hop['actual_ip']}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ allure
        results_table = "TTL | –û–∂–∏–¥–∞–µ–º—ã–π IP | –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π IP | –°—Ç–∞—Ç—É—Å | –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å\n"
        results_table += "-" * 80 + "\n"
        for hop in hops_info:
            correctness = "‚úì" if hop['is_correct'] or hop['expected_ip'] == "Unknown" else "‚úó"
            results_table += f"{hop['ttl']} | {hop['expected_ip']} | {hop['actual_ip']} | {hop['status']} | {correctness}\n"
        
        allure.attach(results_table, name="–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ traceroute")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ö–æ–ø—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
        if incorrect_hops:
            error_msg = f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –º–∞—Ä—à—Ä—É—Ç–µ:\n" + "\n".join(incorrect_hops)
            allure.attach(error_msg, name="–û—à–∏–±–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞")
            pytest.fail(error_msg)
    
    with allure.step("–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
        allure.attach(f"""
        ‚úÖ Traceroute –∫ {ce_ip} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!
        üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: {reached_destination}
        üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ø–æ–≤: {len(hops_info)}
        ‚úÖ –í—Å–µ —Ö–æ–ø—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º
        """, name="–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç")

@allure.epic("–°–µ—Ç–µ–≤—ã–µ —Ç–µ—Å—Ç—ã")
@allure.feature("–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç")
@allure.title("–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º traceroute —Ç–µ—Å—Ç–∞–º")
def test_traceroute_summary():
    """–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º traceroute —Ç–µ—Å—Ç–∞–º"""
    
    summary_results = {}
    
    for ce_ip in IP_DST:
        with allure.step(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {ce_ip}"):
            try:
                hops_info, reached = trace_route_to_ce(ce_ip, VLAN_ID, CE4_INTERFACE)
                
                # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                correct_hops = sum(1 for hop in hops_info if hop['is_correct'] or hop['expected_ip'] == "Unknown")
                total_hops = len(hops_info)
                
                summary_results[ce_ip] = {
                    'success': reached and correct_hops == total_hops,
                    'reached': reached,
                    'correct_hops': correct_hops,
                    'total_hops': total_hops,
                    'path': [hop['actual_ip'] for hop in hops_info]
                }
                
            except Exception as e:
                summary_results[ce_ip] = {
                    'success': False,
                    'error': str(e)
                }
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è allure
    summary_table = "–¶–µ–ª—å | –£—Å–ø–µ—Ö | –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ | –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ö–æ–ø—ã | –í—Å–µ–≥–æ —Ö–æ–ø–æ–≤ | –ú–∞—Ä—à—Ä—É—Ç\n"
    summary_table += "-" * 120 + "\n"
    
    for ce_ip, result in summary_results.items():
        if 'error' in result:
            summary_table += f"{ce_ip} | ‚ùå | - | - | - | –û—à–∏–±–∫–∞: {result['error']}\n"
        else:
            status = "‚úÖ" if result['success'] else "‚ùå"
            reached = "‚úÖ" if result['reached'] else "‚ùå"
            summary_table += f"{ce_ip} | {status} | {reached} | {result['correct_hops']}/{result['total_hops']} | {result['total_hops']} | {' -> '.join(result['path'])}\n"
    
    allure.attach(summary_table, name="–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    all_success = all(result.get('success', False) for result in summary_results.values())
    assert all_success, "–ù–µ –≤—Å–µ traceroute —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"